package com.github.chuangkel.leetcode;

import org.junit.Test;

/**
 * @program: javaNewCharacteristic
 * @description: 402. Remove K Digits
 * @author: chuangkel
 * @create: 2019-01-16
 **/
public class RemoveKDigits402 {
    public String removeKdigits(String num, int k) {

        if(num.length() == 0)
            return "0";
        int digits = num.length() - k;

        char[] stack = new char[num.length()];


        int top = 0;

        //remove from stack if the new num is smaller than the num in stack. reducing k too to indicate the the removal of digit as it wont be making a smaller num.
        for(char c: num.toCharArray()){

            while(top > 0 && stack[top-1] > c && k>0){
                top--;
                k--;
            }
            stack[top] = c;
            top++;
        }

        int i = 0;
        while(i<digits && stack[i] == '0')      //to remove leading zeroes.
            i++;

        return i == digits ? "0":new String(stack, i, digits-i);

    }

//    public String removeKdigits(String num, int k) {
//        int len = num.length();
//        if("".equals(num)){
//            return num;
//        }
//
//        for(int n = 1; n <= k ; n++){
//            //比后面的大 移除
//            char now = num.charAt(0);
//            boolean flag = true;
//            for (int i = 1; i < num.length(); i++){
//                if (now > num.charAt(i)) {
//                    num = num.substring(0, i - 1) + num.substring(i);
//                    flag = false;
//                    break;
//                }
//                now = num.charAt(i);
//            }
//            if(flag){
//                num = num.substring(0, num.length() -1);
//            }
//        }
//        //"0" "0011"
//        //去掉前面的0
//       if(!"0".equals(num) && !"".equals(num) && '0' == num.charAt(0)){
//           int i = 0;
//           int l = num.length();
//           while(l > i){
//               if(num.charAt(i) == '0'){
//                   i ++;
//               }
//               break;
//           }
//           num = num.substring(i);
//       }
//        //Example 3
//        if("".equals(num) && k == len){
//            num = "0";
//        }
//        return num;
//    }


    @Test
    public void test() {
        String s = removeKdigits("10", 1);
//        String s = removeKdigits("9", 1);
//        String s = removeKdigits("19", 1);
//        String s = removeKdigits("99641436378815361153471302158193420182863684789411484994976484827114595334610042544056442370530816060833617030976813134098793056155103202008549344446519354408307307071055065112738442020228471569394796174150323080161225901964338837341524253243218509500254619223683091799365677720582389568156585225666197123093377871100002481402486219837255411382162499321193416524972275273471969155848742457476556433737281147710021781210134765321761285612276511917324552585569882156635094670362653567596144728653795007023230933817566104488637696450166087905100823699425798763598444326069357052842379918535855296915760054459317433521878778171811081076593166663090948029793113626852462712388116483774713426183911481230884393594249331828165503798269634244430773693033882708000249632850148799859322024693146577635543114657662418998860517525989192973250701631765598465053097616804817344343895016724561947860836117504915797011185132674255278236597746042138768473723059825948301565719437610732907662545499042953499866813741157301003371005200992314265077531029437948931255617153417148822355928318598517533241719641002712204874161001604269216566928220767474713135516717997491363360204764154264989004671363541097433484822118483642107547658581450616821769964767032521138851570822729134762460014265433227201724724004338494552397280090568164786109721571436206198382814849033856987338787473335772666933218810822482848994610491705665155516384799459418594559136827941106387689501641851101743298582575466303864906673788496628288920867422193950180810131396612913851112593807649152972068279299934113463669714575613645929365652921808836725682390026075559320995704880149764583379697505303474550029059828116836469203370428449330442281563135568935742669243344218603994417955703485059862132359688776290378210392955310785874528205203788559715493852405991380290274268143557970398441851157977520689440430265144029789788511042795879174567381358510694749512938934687979305099149575464220629804942550564164786808856897809863824121659548034395539735407069279457678613909222371848892294754933299091164656871086269084324529512544747434123547189729993758337622038098699448815701644934651292719067683227727438808955969543542319197883567369733867364250353136697865107182282929655918362211832327827571354787535611501731943856155003853732339819594939524719169561110698571676562329360803282215467534058504728127731515598941143637827010955579092451405821352126706550438315176049692316210490899702613078702535716735901806171522853021035597316703390478571485677998207922773938829371460838611214446417528913575284776737837046439695408523434414916342979688820197836458637694991540998291690345194205452439239827382953039810367712244590155940394387554911786652478111954297185544106384174592451680875083737874735810068767866214924634885513828808880161930987276602570872860752119813042414550396358433893592777541756673206882876746731707766966268096104320061937913505893028833592137540396064375155513979764728180927083060481127522118240026140625647313783901073938419240249929000962722034273952683635919540169732220854978101", 1000);
        System.out.println(s);
        System.out.println('9' < 'A');
//        String IntegerReplacement_397 = "aaaaaaaaaaaa";
//        testSub(IntegerReplacement_397);
//        System.out.println(IntegerReplacement_397);
    }

    public void testSub(String s) {
        //形参字符串String类型传递，是将形参的引用指针指向传进来的字符串。
        //由于String类型是 final char[] 的形式存在的，函数内部的String改变是直接开辟新的字符串。
        // 然后将形参的引用指向新开辟的字符串String,将不会影响外部的值的。
        //此处的赋值 是新开辟字符串"" 然后将形参引用s指向它
        s = "";
    }
}
